import sys

Import("environment")

has_sndio = False

# Set this to True to ignore the existence of sndio headers.
no_sndio = sys.platform.startswith("linux")

l_env = environment.Clone()

configure = Configure(l_env)

is_win = sys.platform.startswith("win") or sys.platform.startswith("cyg") or sys.platform.startswith("msys")

if not no_sndio and configure.CheckCHeader("sndio.h"):
    athena_audio = environment.SharedLibrary("athena_audio", ["audio_sndio.c"], LIBS = ["sndio"])
elif sys.platform.startswith("haiku"):
    athena_audio = environment.SharedLibrary("athena_audio", ["audio_haiku.cpp"], LIBS = ["be", "game"])
elif sys.platform == 'darwin':
    athena_audio = environment.SharedLibrary("athena_audio", ["audio_openal.c"], FRAMEWORKS = ["OpenAL"])
elif is_win and configure.CheckCHeader("dsound.h"):
    athena_audio = environment.SharedLibrary("athena_audio", ["audio_directsound.c"], LIBS= ["dsound", "libdxguid"])
else:
    if is_win:
        al_lib = "openal32"
    else:
        al_lib = "openal"
    athena_audio = environment.SharedLibrary("athena_audio", ["audio_openal.c"], LIBS = [al_lib])

l_env = configure.Finish()

Return("athena_audio")
