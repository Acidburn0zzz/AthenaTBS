from string import Template
import inspect

autogen_warning =  """
/* THIS FILE IS AUTOGENERATED BY:
 *    tools/athena_unit_class_generator.py
 * DO NOT EDIT THIS FILE MANUALLY
 */
 \n
"""
# struct Athena_Class {
#     float defense, attack;
#     unsigned movement, attacks;
#     unsigned range;
#     const char *name;
#     struct Athena_Spriteset *spriteset;

def gen_int_to_str(i):
    return str(i).split('.')[0]

def GenerateAthenaClassDictionary(that):
    return dict(
        defense = str(that["defense"]),
        attack  = str(that["attack"]),
        movement= gen_int_to_str(that["movement"]),
        attacks = gen_int_to_str(that["attacks"]),
        range   = gen_int_to_str(that["range"]),
        name    = gen_int_to_str(that["name"])
    )

def CreateAthenaClassesSource(classes, paths):
    for p in paths:
        path = str(p)
        if path.endswith(".c"):
            source_path = path
        elif path.endswith(".h"):
            header_path = path

    source = open( source_path, "w" )
    header = open( header_path, "w" )
    
    header_preamble = "#pragma once\n" + autogen_warning + "#include \"unit.h\"\n"
    source_preamble = autogen_warning + "#include \"unit.h\"\n"
    
    source.write(source_preamble)
    header.write(header_preamble)
    
    header.write("\n#define ATHENA_NUM_UNIT_CLASSES " + str(len(classes)) + "\n\n")
    
    source.write( "#include \"" + header_path.split('/')[-1] + "\"\n\n")
    
    class_array_def = "const struct Athena_Class classes[ATHENA_NUM_UNIT_CLASSES]"
    
    header.write("extern " + class_array_def + ";\n")
    source.write(class_array_def + " = {\n")
    
    class_template = Template(" $defense, $attack, $movement, $attacks, $range, \"$name\", NULL ")
    
    for that in classes:
        source.write("    {" + class_template.substitute(GenerateAthenaClassDictionary(that)) + "}")
        if not (that == classes[-1]):
            source.write(",")
        source.write("\n")
        
    source.write("};\n")
    
    source.flush()
    source.close()
    
    header.flush()
    header.close()
